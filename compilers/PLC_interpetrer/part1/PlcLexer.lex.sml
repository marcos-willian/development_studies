functor PlcLexerFun(structure Tokens: PlcParser_TOKENS)=
   struct
    structure UserDeclarations =
      struct
(* Plc Lexer *)

(* User declarations *)

open Tokens
type pos = int
type slvalue = Tokens.svalue
type ('a,'b) token = ('a,'b) Tokens.token
type lexresult = (slvalue, pos)token

(* A function to print a message error on the screen. *)
val error = fn x => TextIO.output(TextIO.stdOut, x ^ "\n")
val lineNumber = ref 0
val pos = ref 0

(* Get the current line being read. *)
fun getLineAsString() =
    let
        val lineNum = !lineNumber
    in
        Int.toString lineNum
    end

(* Define what to do when the end of the file is reached. *)
fun eof () = Tokens.EOF(!pos,!pos)

(* Initialize the lexer. *)
fun init() = ()
end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\000\000\000\000\000\000\000\000\000\033\033\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\033\031\008\000\000\000\029\000\027\026\025\024\023\021\000\020\
\\019\019\019\019\019\019\019\019\019\019\017\016\014\012\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\011\000\010\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\007\006\005\000\000\
\\000"
),
 (3, 
"\034\034\034\034\034\034\034\034\034\065\066\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\065\063\038\034\034\034\061\034\060\059\055\054\053\051\034\050\
\\049\049\049\049\049\049\049\049\049\049\047\046\044\042\034\034\
\\034\038\038\038\038\038\038\038\038\038\038\038\038\038\038\038\
\\038\038\038\038\038\038\038\038\038\038\038\041\034\040\034\038\
\\034\038\038\038\038\038\038\038\038\038\038\038\038\038\038\038\
\\038\038\038\038\038\038\038\038\038\038\038\037\036\035\034\034\
\\034"
),
 (8, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\009\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (9, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\009\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (12, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\013\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (14, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (17, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\018\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (19, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\019\019\019\019\019\019\019\019\019\019\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (21, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (27, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\028\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (29, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\030\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (31, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\032\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (33, 
"\000\000\000\000\000\000\000\000\000\033\033\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\033\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (34, 
"\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\000\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034"
),
 (38, 
"\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\039\034\034\034\034\034\034\034\000\034\034\034\034\034\
\\038\038\038\038\038\038\038\038\038\038\034\034\034\034\034\034\
\\034\039\039\039\039\039\039\039\039\039\039\039\039\039\039\039\
\\039\039\039\039\039\039\039\039\039\039\039\034\034\034\034\039\
\\034\039\039\039\039\039\039\039\039\039\039\039\039\039\039\039\
\\039\039\039\039\039\039\039\039\039\039\039\034\034\034\034\034\
\\034"
),
 (39, 
"\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\039\034\034\034\034\034\034\034\000\034\034\034\034\034\
\\039\039\039\039\039\039\039\039\039\039\034\034\034\034\034\034\
\\034\039\039\039\039\039\039\039\039\039\039\039\039\039\039\039\
\\039\039\039\039\039\039\039\039\039\039\039\034\034\034\034\039\
\\034\039\039\039\039\039\039\039\039\039\039\039\039\039\039\039\
\\039\039\039\039\039\039\039\039\039\039\039\034\034\034\034\034\
\\034"
),
 (42, 
"\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\000\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\043\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034"
),
 (44, 
"\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\000\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\045\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034"
),
 (47, 
"\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\000\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\048\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034"
),
 (49, 
"\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\000\034\034\034\034\034\
\\049\049\049\049\049\049\049\049\049\049\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034"
),
 (51, 
"\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\000\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\052\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034"
),
 (55, 
"\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\
\\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\
\\056\056\056\056\056\056\056\056\056\058\056\056\056\056\056\056\
\\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\
\\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\
\\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\
\\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\
\\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\
\\056"
),
 (56, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\057\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (57, 
"\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\
\\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\
\\056\056\056\056\056\056\056\056\056\000\056\056\056\056\056\056\
\\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\
\\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\
\\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\
\\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\
\\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\
\\056"
),
 (60, 
"\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\028\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034"
),
 (61, 
"\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\062\034\034\034\000\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034"
),
 (63, 
"\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\000\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\064\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034"
),
 (65, 
"\034\034\034\034\034\034\034\034\034\065\065\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\065\034\034\034\034\034\034\034\034\034\000\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034"
),
 (66, 
"\034\034\034\034\034\034\034\034\034\065\066\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\065\034\034\034\034\034\034\034\034\034\000\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034"
),
(0, "")]
fun f x = x 
val s = List.map f (List.rev (tl (List.rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(List.map g 
[{fin = [], trans = 0},
{fin = [], trans = 1},
{fin = [], trans = 1},
{fin = [], trans = 3},
{fin = [], trans = 3},
{fin = [(N 71)], trans = 0},
{fin = [(N 44)], trans = 0},
{fin = [(N 69)], trans = 0},
{fin = [(N 27)], trans = 8},
{fin = [(N 27)], trans = 9},
{fin = [(N 79)], trans = 0},
{fin = [(N 77)], trans = 0},
{fin = [(N 42)], trans = 12},
{fin = [(N 63)], trans = 0},
{fin = [(N 49)], trans = 14},
{fin = [(N 52)], trans = 0},
{fin = [(N 57)], trans = 0},
{fin = [(N 65)], trans = 17},
{fin = [(N 55)], trans = 0},
{fin = [(N 22)], trans = 19},
{fin = [(N 40)], trans = 0},
{fin = [(N 31)], trans = 21},
{fin = [(N 60)], trans = 0},
{fin = [(N 67)], trans = 0},
{fin = [(N 36)], trans = 0},
{fin = [(N 38)], trans = 0},
{fin = [(N 75)], trans = 0},
{fin = [(N 73)], trans = 27},
{fin = [(N 2)], trans = 0},
{fin = [], trans = 29},
{fin = [(N 34)], trans = 0},
{fin = [(N 29)], trans = 31},
{fin = [(N 47)], trans = 0},
{fin = [(N 19)], trans = 33},
{fin = [(N 8)], trans = 34},
{fin = [(N 8),(N 71)], trans = 34},
{fin = [(N 8),(N 44)], trans = 34},
{fin = [(N 8),(N 69)], trans = 34},
{fin = [(N 8),(N 27)], trans = 38},
{fin = [(N 8),(N 27)], trans = 39},
{fin = [(N 8),(N 79)], trans = 34},
{fin = [(N 8),(N 77)], trans = 34},
{fin = [(N 8),(N 42)], trans = 42},
{fin = [(N 8),(N 63)], trans = 34},
{fin = [(N 8),(N 49)], trans = 44},
{fin = [(N 8),(N 52)], trans = 34},
{fin = [(N 8),(N 57)], trans = 34},
{fin = [(N 8),(N 65)], trans = 47},
{fin = [(N 8),(N 55)], trans = 34},
{fin = [(N 8),(N 22)], trans = 49},
{fin = [(N 8),(N 40)], trans = 34},
{fin = [(N 8),(N 31)], trans = 51},
{fin = [(N 8),(N 60)], trans = 34},
{fin = [(N 8),(N 67)], trans = 34},
{fin = [(N 8),(N 36)], trans = 34},
{fin = [(N 38)], trans = 55},
{fin = [(N 13)], trans = 56},
{fin = [], trans = 57},
{fin = [(N 16)], trans = 0},
{fin = [(N 8),(N 75)], trans = 34},
{fin = [(N 8),(N 73)], trans = 60},
{fin = [(N 8)], trans = 61},
{fin = [(N 8),(N 34)], trans = 34},
{fin = [(N 8),(N 29)], trans = 63},
{fin = [(N 8),(N 47)], trans = 34},
{fin = [(N 8),(N 19)], trans = 65},
{fin = [(N 5),(N 8),(N 19)], trans = 66}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val COMMENT = STARTSTATE 3;
val INITIAL = STARTSTATE 1;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

fun makeLexer yyinput =
let	val yygone0=1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex () : Internal.result =
let fun continue() = lex() in
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let fun yymktext() = String.substring(!yyb,i0,i-i0)
			     val yypos = i0+ !yygone
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  13 => (lex())
| 16 => (YYBEGIN INITIAL; lex())
| 19 => (lex())
| 2 => (YYBEGIN COMMENT; lex())
| 22 => let val yytext=yymktext() in Tokens.NUM (valOf (Int.fromString yytext), !pos, !pos) end
| 27 => let val yytext=yymktext() in case yytext of
                    "fun" => Tokens.FUN (!pos, !pos)
                |   "rec" => Tokens.REC(!pos, !pos)
                |   "if"  => Tokens.IF (!pos, !pos)
                |   "then" => Tokens.THEN(!pos, !pos)
                |   "else" => Tokens.ELSE(!pos, !pos)
                |   "match" => Tokens.MATCH(!pos, !pos)
                |   "with" => Tokens.WITH(!pos, !pos)
                |   "var" => Tokens.VAR(!pos, !pos)
                |   "fn"  => Tokens.FN(!pos, !pos)
                |   "end" => Tokens.END(!pos, !pos)
                |   "Nil" => Tokens.NIL(!pos, !pos)
                |   "Bool"=> Tokens.BOOL(!pos, !pos)
                |   "Int" => Tokens.INT(!pos, !pos)
                |   "false" => Tokens.FALSE(!pos, !pos)
                |   "true" => Tokens.TRUE(!pos, !pos)
                |   "hd" => Tokens.HD(!pos, !pos)
                |   "tl" => Tokens.TL(!pos,!pos)
                |   "print" => Tokens.PRINT(!pos, !pos)
                |   "_" => Tokens.OPunder(!pos, !pos)
                |   "ise" => Tokens.ISE(!pos, !pos)
                |   _ => Tokens.NAME (yytext, !pos, !pos) end
| 29 => (Tokens.OPnot(!pos, !pos))
| 31 => (Tokens.OPminus(!pos, !pos))
| 34 => (Tokens.OPdisjun(!pos, !pos))
| 36 => (Tokens.OPplus(!pos, !pos))
| 38 => (Tokens.OPtimes(!pos, !pos))
| 40 => (Tokens.OPdiv(!pos, !pos))
| 42 => (Tokens.OPequal (!pos, !pos))
| 44 => (Tokens.OPVbar(!pos, !pos))
| 47 => (Tokens.OPdiff(!pos, !pos))
| 49 => (Tokens.OPless(!pos, !pos))
| 5 => (lex())
| 52 => (Tokens.OPlessEq(!pos, !pos))
| 55 => (Tokens.OP2cons(!pos, !pos))
| 57 => (Tokens.OPsemicolon(!pos, !pos))
| 60 => (Tokens.OParrow(!pos, !pos))
| 63 => (Tokens.OP2arrow(!pos, !pos))
| 65 => (Tokens.OPcons(!pos, !pos))
| 67 => (Tokens.OPcolon(!pos, !pos))
| 69 => (Tokens.Lbrace(!pos, !pos))
| 71 => (Tokens.Rbrace(!pos, !pos))
| 73 => (Tokens.Lpar(!pos, !pos))
| 75 => (Tokens.Rpar(!pos, !pos))
| 77 => (Tokens.Lbracket(!pos, !pos))
| 79 => (Tokens.Rbracket(!pos, !pos))
| 8 => (lex())
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Unsafe.Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (String.size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof ()
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := String.substring(!yyb,i0,l-i0)^newchars;
		     yygone := !yygone+i0;
		     yybl := String.size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(Unsafe.CharVector.sub(!yyb,l))
		val NewChar = if NewChar<128 then NewChar else 128
		val NewState = Char.ord(Unsafe.CharVector.sub(trans,NewChar))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if String.substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
end
  in lex
  end
end
