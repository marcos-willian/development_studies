rm(list = ls())
g = glass
g = Glass
library(Glass)
install.packages("glassdoor")
install.packages(c("colorspace", "cpp11", "curl", "fields", "ggplot2", "imager", "mime", "rmarkdown", "spam", "stringi", "tinytex", "xfun"))
isis
data(isis)
data(isis)
? data
data("iris")
force(iris)
View(iris)
data("UKgas")
force(UKgas)
data(Glass)
# NOT RUN {
data(Glass)
summary(Glass)
# }
library("mlbench")
data(Glass)
View(Glass)
rm(list = ls())
library("kernlab")
library("mlbench")
library("plot3D")
glasses = data(Glass)
View(Glass)
glasses
Glass
Glass[1,]
View(Glass)
str(Glass$Type)
levels(Glass$Type)
dadosClasse1<- Glass[Glass$Type == 1,]
View(dadosClasse1)
#Separa classes
levels = levels(Glass$Type)
dadosClasse1<- Glass[Glass$Type == levels,]
length(levels)
dadosClasseN = c()
for(i in 1:length(levels)){
dadosClasseN[i]<- Glass[Glass$Type == levels[i],]
}
dadosClasseN = list()
View(dadosClasse1)
rm(list = ls())
library("kernlab")
library("mlbench")
library("plot3D")
data(Glass)
#Separa classes
levels = levels(Glass$Type)
dadosClasseN = list()
for(i in 1:length(levels)){
dadosClasseN[i]<- Glass[Glass$Type == levels[i],]
}
View(dadosClasseN)
dadosClasseN[[1]]
dadosClasseN = Glass[Glass$Type == levels[1],]
porcentagemTreino = rbind(porcentagemTreino, sample.split(dadosClasseN, 0.7))
porcentagemTreino = c()
porcentagemTreino = rbind(porcentagemTreino, sample.split(dadosClasseN, 0.7))
library(caTools) #Função sample.split
porcentagemTreino = rbind(porcentagemTreino, sample.split(dadosClasseN, 0.7))
View(porcentagemTreino)
porcentagemTreino = sample.split(dadosClasseN, 0.7)
porcentagemTreino = sample.split(dadosClasseN, 0.7)
porcentagemTreino = sample.split(dadosClasseN, 0.7)
rm(list = ls())
library("kernlab")
library("mlbench")
library("plot3D")
library(caTools) #Função sample.split
data(Glass)
#Separa classes
levels = levels(Glass$Type)
#Seleciona aleatoriamente 70% das amostras e respostas treino de cada tipo
dadosClasseN = Glass[Glass$Type == levels[1],]
porcentagemTreino = sample.split(dadosClasseN, 0.7)
porcentagemTreino = sample.split(dadosClasseN$Type, 0.7)
()
porcentagemTreino = c()
porcentagemTreino = rbind(porcentagemTreino, dadosClasseN[sampleTreino,])
sampleTreino = sample.split(dadosClasseN$Type, 0.7)
porcentagemTreino = rbind(porcentagemTreino, dadosClasseN[sampleTreino,])
#Seleciona aleatoriamente 70% das amostras e respostas treino de cada tipo
dadosClasseN = Glass[Glass$Type == levels[2],]
sampleTreino = sample.split(dadosClasseN$Type, 0.7)
porcentagemTreino = rbind(porcentagemTreino, dadosClasseN[sampleTreino,])
View(porcentagemTreino)
rm(list = ls())
library("kernlab")
library("mlbench")
library("plot3D")
library(caTools) #Função sample.split
data(Glass)
porcentagemTreino = c()
#Seleciona aleatoriamente 70% das amostras e respostas treino de cada tipo
dadosClasseN = Glass[Glass$Type == levels[1],]
#Seleciona aleatoriamente 70% das amostras e respostas treino de cada tipo
dadosClasseN = Glass[Glass$Type == levels[1],]
#Separa classes
levels = levels(Glass$Type)
#Seleciona aleatoriamente 70% das amostras e respostas treino de cada tipo
dadosClasseN = Glass[Glass$Type == levels[1],]
View(dadosClasseN)
#Seleciona aleatoriamente 70% das amostras e respostas treino de cada tipo
dadosClasseN = Glass[Glass$Type == levels[2],]
sampleTreino = sample.split(dadosClasseN$Type, 0.7)
porcentagemTreino = rbind(porcentagemTreino, dadosClasseN[sampleTreino,])
porcentagemTeste = Glass[porcentagemTreino]
porcentagemTeste = Glass[porcentagemTreino,]
porcentagemTeste = Glass[!porcentagemTreino,]
View(porcentagemTeste)
rm(list = ls())
library("kernlab")
library("mlbench")
library("plot3D")
library(caTools) #Função sample.split
data(Glass)
#Separa classes
levels = levels(Glass$Type)
porcentagemTreino = c()
porcentagemTeste = c()
set.seed(0)
#Seleciona aleatoriamente 70% das amostras e respostas treino de cada tipo
dadosClasseN = Glass[Glass$Type == levels[1],]
sampleTreino = sample.split(dadosClasseN$Type, 0.7)
porcentagemTreino = rbind(porcentagemTreino, dadosClasseN[sampleTreino,])
porcentagemTeste = rbind(porcentagemTeste, dadosClasseN[!sampleTreino,])
View(porcentagemTeste)
View(porcentagemTreino)
#Seleciona aleatoriamente 70% das amostras e respostas treino de cada tipo
dadosClasseN = Glass[Glass$Type == levels[2],]
sampleTreino = sample.split(dadosClasseN$Type, 0.7)
porcentagemTreino = rbind(porcentagemTreino, dadosClasseN[sampleTreino,])
porcentagemTeste = rbind(porcentagemTeste, dadosClasseN[!sampleTreino,])
rm(list = ls())
library("kernlab")
library("mlbench")
library("plot3D")
library(caTools) #Função sample.split
data(Glass)
#Separa classes
levels = levels(Glass$Type)
porcentagemTreino = c()
porcentagemTeste = c()
#for( i in 1:20)
#Separar dados de teste e dados de treino
for(i in 1:length(levels)){
#Seleciona aleatoriamente 70% das amostras e respostas treino de cada tipo
#Os 30% restantes são para teste do modelo
dadosClasseN = Glass[Glass$Type == levels[i],]
sampleTreino = sample.split(dadosClasseN$Type, 0.7)
porcentagemTreino = rbind(porcentagemTreino, dadosClasseN[sampleTreino,])
porcentagemTeste = rbind(porcentagemTeste, dadosClasseN[!sampleTreino,])
}
porcentagemTreino$Type
!porcentagemTreino$Type
porcentagemTreino[1:9,]
porcentagemTreino[1:3,1:9],
porcentagemTreino[1:3, 1:9]
View(Glass)
View(Glass)
porcentagemTreino[, 1:9]
teste = porcentagemTreino[, 1:9]
teste = porcentagemTreino[, -"type"]
porcentagemTreino[, -"type"]
porcentagemTreino[, "type"]
porcentagemTreino[, "Type"]
porcentagemTreino[, -"Type"]
porcentagemTreino[, !"Type"]
espiralTreinamento<-mlbench.spirals(700,1,0.05)
#Treinamento modelo
svmTreinamento = ksvm(porcentagemTreino[, 1:9],
porcentagemTreino$Type,
type = "C-bsvc",
kernel = "rbfdot",
kpar = list(sigma = 0.9),
C = 11)
