x_test = as.matrix(dataSet[!sampleTrain, ])
modelo =  treinaELM(x_train, y_train, p, TRUE)
y_train_modelo = ELM(x_train, modelo$Z, modelo$W, TRUE)
y_test_modelo = ELM(x_test, modelo$Z, modelo$W, TRUE)
acuTrain[i] = acurracy(y_train, y_train_modelo)
acuTest[i] = acurracy(y_test, y_test_modelo)
}
outTable[indice, 1] = mean(acuTrain)
outTable[indice, 2] = sd(acuTrain)
outTable[indice, 3] = mean(acuTest)
outTable[indice, 4] = sd(acuTest)
}
rownames(outTable) = as.character(pvector)
colnames(outTable) =  c("Acurácia Média Treinamento",
"Desvio Padrão Treinamento",
"Acurácia Média Teste",
"Desvio Padrão Teste")
View(outTable)
View(outTable)
rm(list = ls())
library("caTools")
source("treinaELM.R")
source("ELM.R")
acurracy <- function(respostas, teste){
return(sum(as.numeric(respostas == teste))/length(respostas))
}
set.seed(10)
heart = read.table("heart.dat", sep = " ", dec = ".")
#Tratamento dos dados
classes = ifelse( heart[complete.cases(heart), 14] == "1", 1, -1)
dataSet = heart[complete.cases(heart), 1:13]
pvector = seq(100, to = 600, by = 10)
outTable = matrix(nrow =  length(pvector), ncol = 4)
indice = 0
for(p in pvector){ #LOOP num neuronios
indice = indice + 1
acuTrain = NULL
acuTest = NULL
for(i in 1:100){#Num execuções
sampleTrain = sample.split(classes, SplitRatio = 7/10)
#sepra amostras de treino
y_train = classes[sampleTrain]
x_train = as.matrix(dataSet[sampleTrain, ])
#separa amostra de teste
y_test = classes[!sampleTrain]
x_test = as.matrix(dataSet[!sampleTrain, ])
modelo =  treinaELM(x_train, y_train, p, TRUE)
y_train_modelo = ELM(x_train, modelo$Z, modelo$W, TRUE)
y_test_modelo = ELM(x_test, modelo$Z, modelo$W, TRUE)
acuTrain[i] = acurracy(y_train, y_train_modelo)
acuTest[i] = acurracy(y_test, y_test_modelo)
}
outTable[indice, 1] = mean(acuTrain)
outTable[indice, 2] = sd(acuTrain)
outTable[indice, 3] = mean(acuTest)
outTable[indice, 4] = sd(acuTest)
}
plot(outTable[,1], pvector)
View(outTable)
plot(outTable[,1], pvector, type = "l")
plot( pvector, outTable[,1], type = "l")
plot( pvector, outTable[,3], type = "l")
plot( pvector, outTable[,3], type = "l", xlab = "Número de neurônios", ylab = "Acurácia média")
plot( pvector, outTable[,1], type = "l", xlab = "Número de neurônios", ylab = "Acurácia média")
source("C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/RNA/Execicios/EX6/RCode/EX6C_base1.R", encoding = 'UTF-8')
mean(acuTrain)
sd(acuTrain)
mean(acuTest)
sd(acuTest)
rm(list = ls())
library(mlbench)
library("caTools")
source("treinaELM.R")
source("ELM.R")
acurracy <- function(respostas, teste){
return(sum(as.numeric(respostas == teste))/length(respostas))
}
data("BreastCancer")
#Tratamento dos dados
classes = ifelse( BreastCancer[complete.cases(BreastCancer), 11] == "benign", 1, -1)
dataSet = apply(BreastCancer[complete.cases(BreastCancer), 2:10], 2, as.numeric)
pvector = c(5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 300)
outTable = matrix(nrow =  length(pvector), ncol = 4)
indice = 0
for(p in pvector){ #LOOP num neuronios
indice = indice + 1
acuTrain = NULL
acuTest = NULL
for(i in 1:20){#Num execuções
sampleTrain = sample.split(classes, SplitRatio = 7/10)
#sepra amostras de treino
y_train = classes[sampleTrain]
x_train = as.matrix(dataSet[sampleTrain, ])
#separa amostra de teste
y_test = classes[!sampleTrain]
x_test = as.matrix(dataSet[!sampleTrain, ])
modelo =  treinaELM(x_train, y_train, p, TRUE)
y_train_modelo = ELM(x_train, modelo$Z, modelo$W, TRUE)
y_test_modelo = ELM(x_test, modelo$Z, modelo$W, TRUE)
acuTrain[i] = acurracy(y_train, y_train_modelo)
acuTest[i] = acurracy(y_test, y_test_modelo)
}
outTable[indice, 1] = mean(acuTrain)
outTable[indice, 2] = sd(acuTrain)
outTable[indice, 3] = mean(acuTest)
outTable[indice, 4] = sd(acuTest)
}
rownames(outTable) = as.character(pvector)
colnames(outTable) =  c("Acurácia Média - Treinamento",
"Desvio Padrão - Treinamento",
"Acurácia Média - Teste",
"Desvio Padrão - Teste")
write.csv2(outTable, "IMG/saidaBreast.csv")
View(outTable)
rm(list = ls())
library(mlbench)
library("caTools")
source("treinaELM.R")
source("ELM.R")
acurracy <- function(respostas, teste){
return(sum(as.numeric(respostas == teste))/length(respostas))
}
data("BreastCancer")
#Tratamento dos dados
classes = ifelse( BreastCancer[complete.cases(BreastCancer), 11] == "benign", 1, -1)
dataSet = apply(BreastCancer[complete.cases(BreastCancer), 2:10], 2, as.numeric)
View(dataSet)
for (i in 1:ncol(dataSet)) {
minC <- min(dataSet[, i])
maxC <- max(dataSet[, i])
for (j in 1:nrow(X)) {
dataSet[j, i] = (dataSet[j, i] - minC)/(maxC - minC)
}
}
for (i in 1:ncol(dataSet)) {
minC <- min(dataSet[, i])
maxC <- max(dataSet[, i])
for (j in 1:nrow(dataSet)) {
dataSet[j, i] = (dataSet[j, i] - minC)/(maxC - minC)
}
}
a = apply(BreastCancer[complete.cases(BreastCancer), 2:10], 2, as.numeric)
View(a)
pvector = c(5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 300)
outTable = matrix(nrow =  length(pvector), ncol = 4)
indice = 0
for(p in pvector){ #LOOP num neuronios
indice = indice + 1
acuTrain = NULL
acuTest = NULL
for(i in 1:20){#Num execuções
sampleTrain = sample.split(classes, SplitRatio = 7/10)
#sepra amostras de treino
y_train = classes[sampleTrain]
x_train = as.matrix(dataSet[sampleTrain, ])
#separa amostra de teste
y_test = classes[!sampleTrain]
x_test = as.matrix(dataSet[!sampleTrain, ])
modelo =  treinaELM(x_train, y_train, p, TRUE)
y_train_modelo = ELM(x_train, modelo$Z, modelo$W, TRUE)
y_test_modelo = ELM(x_test, modelo$Z, modelo$W, TRUE)
acuTrain[i] = acurracy(y_train, y_train_modelo)
acuTest[i] = acurracy(y_test, y_test_modelo)
}
outTable[indice, 1] = mean(acuTrain)
outTable[indice, 2] = sd(acuTrain)
outTable[indice, 3] = mean(acuTest)
outTable[indice, 4] = sd(acuTest)
}
rownames(outTable) = as.character(pvector)
colnames(outTable) =  c("Acurácia Média - Treinamento",
"Desvio Padrão - Treinamento",
"Acurácia Média - Teste",
"Desvio Padrão - Teste")
View(outTable)
rm(list = ls())
library(mlbench)
library("caTools")
source("treinaELM.R")
source("ELM.R")
acurracy <- function(respostas, teste){
return(sum(as.numeric(respostas == teste))/length(respostas))
}
data("BreastCancer")
#Tratamento dos dados
classes = ifelse( BreastCancer[complete.cases(BreastCancer), 11] == "benign", 1, -1)
dataSet = apply(BreastCancer[complete.cases(BreastCancer), 2:10], 2, as.numeric)
for (i in 1:ncol(dataSet)) {
minC <- min(dataSet[, i])
maxC <- max(dataSet[, i])
for (j in 1:nrow(dataSet)) {
dataSet[j, i] = (dataSet[j, i] - minC)/(maxC - minC)
}
}
pvector = c(5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 300)
outTable = matrix(nrow =  length(pvector), ncol = 4)
indice = 0
for(p in pvector){ #LOOP num neuronios
indice = indice + 1
acuTrain = NULL
acuTest = NULL
for(i in 1:20){#Num execuções
sampleTrain = sample.split(classes, SplitRatio = 7/10)
#sepra amostras de treino
y_train = classes[sampleTrain]
x_train = as.matrix(dataSet[sampleTrain, ])
#separa amostra de teste
y_test = classes[!sampleTrain]
x_test = as.matrix(dataSet[!sampleTrain, ])
modelo =  treinaELM(x_train, y_train, p, TRUE)
y_train_modelo = ELM(x_train, modelo$Z, modelo$W, TRUE)
y_test_modelo = ELM(x_test, modelo$Z, modelo$W, TRUE)
acuTrain[i] = acurracy(y_train, y_train_modelo)
acuTest[i] = acurracy(y_test, y_test_modelo)
}
outTable[indice, 1] = mean(acuTrain)
outTable[indice, 2] = sd(acuTrain)
outTable[indice, 3] = mean(acuTest)
outTable[indice, 4] = sd(acuTest)
}
rownames(outTable) = as.character(pvector)
colnames(outTable) =  c("Acurácia Média - Treinamento",
"Desvio Padrão - Treinamento",
"Acurácia Média - Teste",
"Desvio Padrão - Teste")
View(outTable)
rm(list = ls())
library(mlbench)
library("caTools")
source("treinaELM.R")
source("ELM.R")
acurracy <- function(respostas, teste){
return(sum(as.numeric(respostas == teste))/length(respostas))
}
data("BreastCancer")
#Tratamento dos dados
classes = ifelse( BreastCancer[complete.cases(BreastCancer), 11] == "benign", 1, -1)
dataSet = apply(BreastCancer[complete.cases(BreastCancer), 2:10], 2, as.numeric)
for (i in 1:ncol(dataSet)) {
minC <- min(dataSet[, i])
maxC <- max(dataSet[, i])
for (j in 1:nrow(dataSet)) {
dataSet[j, i] = (dataSet[j, i] - minC)/(maxC - minC)
}
}
pvector = c(5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 300)
outTable = matrix(nrow =  length(pvector), ncol = 4)
indice = 0
for(p in pvector){ #LOOP num neuronios
indice = indice + 1
acuTrain = NULL
acuTest = NULL
for(i in 1:20){#Num execuções
sampleTrain = sample.split(classes, SplitRatio = 7/10)
#sepra amostras de treino
y_train = classes[sampleTrain]
x_train = as.matrix(dataSet[sampleTrain, ])
#separa amostra de teste
y_test = classes[!sampleTrain]
x_test = as.matrix(dataSet[!sampleTrain, ])
modelo =  treinaELM(x_train, y_train, p, TRUE)
y_train_modelo = ELM(x_train, modelo$Z, modelo$W, TRUE)
y_test_modelo = ELM(x_test, modelo$Z, modelo$W, TRUE)
acuTrain[i] = acurracy(y_train, y_train_modelo)
acuTest[i] = acurracy(y_test, y_test_modelo)
}
outTable[indice, 1] = mean(acuTrain)
outTable[indice, 2] = sd(acuTrain)
outTable[indice, 3] = mean(acuTest)
outTable[indice, 4] = sd(acuTest)
}
rm(list = ls())
library(mlbench)
library("caTools")
source("treinaELM.R")
source("ELM.R")
acurracy <- function(respostas, teste){
return(sum(as.numeric(respostas == teste))/length(respostas))
}
data("BreastCancer")
#Tratamento dos dados
classes = ifelse( BreastCancer[complete.cases(BreastCancer), 11] == "benign", 1, -1)
dataSet = apply(BreastCancer[complete.cases(BreastCancer), 2:10], 2, as.numeric)
pvector = c(5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 300)
outTable = matrix(nrow =  length(pvector), ncol = 4)
indice = 0
for(p in pvector){ #LOOP num neuronios
indice = indice + 1
acuTrain = NULL
acuTest = NULL
for(i in 1:20){#Num execuções
sampleTrain = sample.split(classes, SplitRatio = 7/10)
#sepra amostras de treino
y_train = classes[sampleTrain]
x_train = as.matrix(dataSet[sampleTrain, ])
#separa amostra de teste
y_test = classes[!sampleTrain]
x_test = as.matrix(dataSet[!sampleTrain, ])
modelo =  treinaELM(x_train, y_train, p, TRUE)
y_train_modelo = ELM(x_train, modelo$Z, modelo$W, TRUE)
y_test_modelo = ELM(x_test, modelo$Z, modelo$W, TRUE)
acuTrain[i] = acurracy(y_train, y_train_modelo)
acuTest[i] = acurracy(y_test, y_test_modelo)
}
outTable[indice, 1] = mean(acuTrain)
outTable[indice, 2] = sd(acuTrain)
outTable[indice, 3] = mean(acuTest)
outTable[indice, 4] = sd(acuTest)
}
rm(list = ls())
source("treinaPerceptron.R")
source("perceptron.R")
library("caTools") # Funçã sample.split
library(mlbench) #Banco BreastCancer
set.seed(0)
acurracy <- function(respostas, teste){
return(sum(as.numeric(respostas == teste))/length(respostas))
}
data("BreastCancer")
dataSet = BreastCancer[complete.cases(BreastCancer), 2:10]
classes = BreastCancer[complete.cases(BreastCancer), 11]
#Cria classes
classe = ifelse(classes == "benign", 0, 1)
dataSet = apply(dataSet, 2, as.numeric)
for (i in 1:ncol(dataSet)) {
minC <- min(dataSet[, i])
maxC <- max(dataSet[, i])
for (j in 1:nrow(dataSet)) {
dataSet[j, i] = (dataSet[j, i] - minC)/(maxC - minC)
}
}
acuTrain = NULL
acuTest = NULL
#Começa o loop
for(i in 1:50){
#Amostra 70 de cada classe para compor o treino
sampleTrain = sample.split(classe, SplitRatio = 7/10)
#sepra amostras de treino
y_train = classe[sampleTrain]
x_train = as.matrix(dataSet[sampleTrain, ])
#separa amostra de teste
y_test = classe[!sampleTrain]
x_test = as.matrix(dataSet[!sampleTrain, ])
retList =  treinaPerceptron(x_train, y_train, 0.1, 0.001, 100, 1)
w = retList$w
y_train_modelo = c()
for(j in 1:dim(x_train)[1]){
y_train_modelo [j] = perceptron(x_train[j,], w, 1)
}
y_test_modelo = c()
for(j in 1:dim(x_test)[1]){
y_test_modelo[j] = perceptron(x_test[j,], w, 1)
}
acuTrain[i] = acurracy(y_train, y_train_modelo)
acuTest[i] = acurracy(y_test, y_test_modelo)
}
mean(acuTrain)
sd(acuTrain)
mean(acuTest)
sd(acuTest)
source("C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/RNA/Execicios/EX6/RCode/EX6C_base1.R", encoding = 'UTF-8')
mean(acuTrain)
sd(acuTrain)
mean(acuTest)
sd(acuTest)
source("C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/RNA/Execicios/EX6/RCode/EX6B.R", encoding = 'UTF-8')
View(outTable)
rm(list = ls())
library("caTools")
source("treinaELM.R")
source("ELM.R")
acurracy <- function(respostas, teste){
return(sum(as.numeric(respostas == teste))/length(respostas))
}
set.seed(10)
heart = read.table("heart.dat", sep = " ", dec = ".")
#Tratamento dos dados
classes = ifelse( heart[complete.cases(heart), 14] == "1", 1, -1)
dataSet = heart[complete.cases(heart), 1:13]
pvector = seq(5, to = 100, by = 5)
append(pvector, 300)
outTable = matrix(nrow =  length(pvector), ncol = 4)
indice = 0
for(p in pvector){ #LOOP num neuronios
indice = indice + 1
acuTrain = NULL
acuTest = NULL
for(i in 1:100){#Num execuções
sampleTrain = sample.split(classes, SplitRatio = 7/10)
#sepra amostras de treino
y_train = classes[sampleTrain]
x_train = as.matrix(dataSet[sampleTrain, ])
#separa amostra de teste
y_test = classes[!sampleTrain]
x_test = as.matrix(dataSet[!sampleTrain, ])
modelo =  treinaELM(x_train, y_train, p, TRUE)
y_train_modelo = ELM(x_train, modelo$Z, modelo$W, TRUE)
y_test_modelo = ELM(x_test, modelo$Z, modelo$W, TRUE)
acuTrain[i] = acurracy(y_train, y_train_modelo)
acuTest[i] = acurracy(y_test, y_test_modelo)
}
outTable[indice, 1] = mean(acuTrain)
outTable[indice, 2] = sd(acuTrain)
outTable[indice, 3] = mean(acuTest)
outTable[indice, 4] = sd(acuTest)
}
View(outTable)
rownames(outTable) = as.character(pvector)
colnames(outTable) =  c("Acurácia Média Treinamento",
"Desvio Padrão Treinamento",
"Acurácia Média Teste",
"Desvio Padrão Teste")
pvector
append(pvector, 300)
pvector = append(pvector, 300)
pvector
rm(list = ls())
library("caTools")
source("treinaELM.R")
source("ELM.R")
acurracy <- function(respostas, teste){
return(sum(as.numeric(respostas == teste))/length(respostas))
}
set.seed(10)
heart = read.table("heart.dat", sep = " ", dec = ".")
#Tratamento dos dados
classes = ifelse( heart[complete.cases(heart), 14] == "1", 1, -1)
dataSet = heart[complete.cases(heart), 1:13]
pvector = seq(5, to = 100, by = 5)
pvector = append(pvector, 300)
outTable = matrix(nrow =  length(pvector), ncol = 4)
indice = 0
for(p in pvector){ #LOOP num neuronios
indice = indice + 1
acuTrain = NULL
acuTest = NULL
for(i in 1:100){#Num execuções
sampleTrain = sample.split(classes, SplitRatio = 7/10)
#sepra amostras de treino
y_train = classes[sampleTrain]
x_train = as.matrix(dataSet[sampleTrain, ])
#separa amostra de teste
y_test = classes[!sampleTrain]
x_test = as.matrix(dataSet[!sampleTrain, ])
modelo =  treinaELM(x_train, y_train, p, TRUE)
y_train_modelo = ELM(x_train, modelo$Z, modelo$W, TRUE)
y_test_modelo = ELM(x_test, modelo$Z, modelo$W, TRUE)
acuTrain[i] = acurracy(y_train, y_train_modelo)
acuTest[i] = acurracy(y_test, y_test_modelo)
}
outTable[indice, 1] = mean(acuTrain)
outTable[indice, 2] = sd(acuTrain)
outTable[indice, 3] = mean(acuTest)
outTable[indice, 4] = sd(acuTest)
}
rownames(outTable) = as.character(pvector)
colnames(outTable) =  c("Acurácia Média Treinamento",
"Desvio Padrão Treinamento",
"Acurácia Média Teste",
"Desvio Padrão Teste")
rm(list = ls())
library("caTools")
source("treinaELM.R")
source("ELM.R")
acurracy <- function(respostas, teste){
return(sum(as.numeric(respostas == teste))/length(respostas))
}
set.seed(10)
heart = read.table("heart.dat", sep = " ", dec = ".")
#Tratamento dos dados
classes = ifelse( heart[complete.cases(heart), 14] == "1", 1, -1)
dataSet = heart[complete.cases(heart), 1:13]
for (i in 1:ncol(dataSet)) {
minC <- min(dataSet[, i])
maxC <- max(dataSet[, i])
for (j in 1:nrow(dataSet)) {
dataSet[j, i] = (dataSet[j, i] - minC)/(maxC - minC)
}
}
pvector = seq(5, to = 100, by = 5)
pvector = append(pvector, 300)
outTable = matrix(nrow =  length(pvector), ncol = 4)
indice = 0
for(p in pvector){ #LOOP num neuronios
indice = indice + 1
acuTrain = NULL
acuTest = NULL
for(i in 1:100){#Num execuções
sampleTrain = sample.split(classes, SplitRatio = 7/10)
#sepra amostras de treino
y_train = classes[sampleTrain]
x_train = as.matrix(dataSet[sampleTrain, ])
#separa amostra de teste
y_test = classes[!sampleTrain]
x_test = as.matrix(dataSet[!sampleTrain, ])
modelo =  treinaELM(x_train, y_train, p, TRUE)
y_train_modelo = ELM(x_train, modelo$Z, modelo$W, TRUE)
y_test_modelo = ELM(x_test, modelo$Z, modelo$W, TRUE)
acuTrain[i] = acurracy(y_train, y_train_modelo)
acuTest[i] = acurracy(y_test, y_test_modelo)
}
outTable[indice, 1] = mean(acuTrain)
outTable[indice, 2] = sd(acuTrain)
outTable[indice, 3] = mean(acuTest)
outTable[indice, 4] = sd(acuTest)
}
rownames(outTable) = as.character(pvector)
colnames(outTable) =  c("Acurácia Média Treinamento",
"Desvio Padrão Treinamento",
"Acurácia Média Teste",
"Desvio Padrão Teste")
View(outTable)
