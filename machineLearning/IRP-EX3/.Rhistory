distancias[iGrupo] = distanciaCheby(grupo[iGrupo], amostras[iAmostra])
}
rm(list = ls())
#funções
criaGaussianaClassificada <- function(centro, numero, desvio, classe){
retList = list()
retList$gaussiana = matrix(rnorm(numAmostrasGaussiana*2), ncol=2)*sd + t(matrix(centro, nrow = 2, ncol = numAmostrasGaussiana))
retList$classe = matrix(classe, ncol = 1, nrow = numAmostrasGaussiana) #Classifica
return(retList)
}
source("KNN.R")
numAmostrasGaussiana = 100
sd = 0.3
gaussiana1 = criaGaussianaClassificada(c(2,2), numAmostrasGaussiana, sd, 1)
gaussiana2 = criaGaussianaClassificada(c(4,2), numAmostrasGaussiana, sd, 2)
gaussiana3 = criaGaussianaClassificada(c(2,4), numAmostrasGaussiana, sd, 3)
gaussiana4 = criaGaussianaClassificada(c(4,4), numAmostrasGaussiana, sd, 4)
#Vector com todas as gaussianas e classes
gaussianas = rbind(gaussiana1$gaussiana, gaussiana2$gaussiana, gaussiana3$gaussiana, gaussiana4$gaussiana)
classes = rbind(gaussiana1$classe, gaussiana2$classe, gaussiana3$classe, gaussiana4$classe)
#Cria amostras para classificação
numAmostras = 2
sdAmostra = 2
amostras = matrix((runif(numAmostras*2) - 0.5), ncol = 2)*sdAmostra +
t(matrix(c(3, 3), nrow = 2, ncol = numAmostras))
grupo = gaussianas
length(amostras)
View(amostras)
length(amostras[1])
length(amostras[,])
length(amostras[])
dim(amostras)
dim(amostras)[1]
distancias = c()
distanciaCheby(gaussianas[1],amostras[1])
distanciaCheby(gaussianas[1],amostras[1])
distanciaCheby(gaussianas[1,1],amostras[1])
View(gaussianas)
gaussianas[1]
gaussianas[1,1]
gaussianas[1:1]
gaussianas
metricaManhattan <- function(x_i,x_j)
#calcual a distância baseada na metrica de manhattan
{
return(sum(abs(x_i - x_j)))
}
metricaManhattan(gaussianas[1,],amostras[1,])
amostras[1,]
amostras[1]
amostras[1,]
gaussianas[1,]
gaussianas[1,] - amostras[1,]
sum(gaussianas[1,] - amostras[1,])
sum(abs(gaussianas[1,] - amostras[1,]))
(abs(gaussianas[1,] - amostras[1,]))
distanciaCheby(gaussianas[1,],amostras[1,])
for(iAmostra in 1:dim(amostras)[1]){
for(iGrupo in  1:dim(grupo)[1])
distancias[iGrupo] = distanciaCheby(grupo[iGrupo,], amostras[iAmostra,])
}
for(iGrupo in  1:dim(grupo)[1])
distancias[iGrupo] = distanciaCheby(grupo[iGrupo,], amostras[1,])
for(iAmostra in 1:dim(amostras)[1]){
for(iGrupo in  1:dim(grupo)[1])
distancias[iGrupo] = distanciaCheby(grupo[iGrupo,], amostras[1,])
}
str(distancias)
distanciaCheby(gaussianas[2,],amostras[1,])
?break
distancias == min(distancias)
which(distancias == min(distancias))
?which
distancias[250] = NaN
which(distancias == min(distancias))
distancias == min(distancias)
for(iGrupo in  1:dim(grupo)[1]){
distancias[iGrupo] = distanciaCheby(grupo[iGrupo,], amostras[iAmostra,])
}
for(iGrupo in  1:dim(grupo)[1]){
distancias[iGrupo] = distanciaCheby(grupo[iGrupo,], amostras[iAmostra,])
}
distancias == min(distancias)
for(iGrupo in  1:dim(grupo)[1]){
distancias[iGrupo] = distanciaCheby(grupo[iGrupo,], amostras[1,])
}
distancias == min(distancias)
which(distancias == min(distancias))
distancias[250]
distancias[250] = 20
distancias
?min
distancias[250] = NA
distancias
which(distancias == min(distancias))
?which
min(distancias)
?min
min(distancias, na.rm = TRUE)
which(distancias == min(distancias, na.rm = TRUE))
# Create the function.
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
iAmostra = 1
for(iGrupo in  1:dim(grupo)[1]){
distancias[iGrupo] = distanciaCheby(grupo[iGrupo,], amostras[iAmostra,])
}
k = 1
iClass = 1
visinhoProx = which(distancias == min(distancias, na.rm = TRUE))
distancias[250]
distancias(visinhoProx) = NA
visinhoProx = which(distancias == min(distancias, na.rm = TRUE), arr.ind = TRUE)
?which
visinhoProx
distancias[250]
distancias[visinhoProx] = NA
distancias[250]
classeVisinhos = c()
classificacaoAmostra = c()
classeVisinhos[iClass] = classes[visinhoProx]
iClass = 2
visinhoProx = which(distancias == min(distancias, na.rm = TRUE), arr.ind = TRUE)
distancias[visinhoProx] = NA
classeVisinhos[iClass] = classes[visinhoProx]
visinhoProx = which(distancias == min(distancias, na.rm = TRUE), arr.ind = TRUE)
distancias[visinhoProx] = NA
classeVisinhos[iClass] = classes[visinhoProx]
iClass = 3
classeVisinhos[iClass] = classes[visinhoProx]
classificacaoAmostra[iAmostra] = getmode(classeVisinhos)
iAmostra = 2
for(iGrupo in  1:dim(grupo)[1]){
distancias[iGrupo] = distanciaCheby(grupo[iGrupo,], amostras[iAmostra,])
}
for(iClass in 1:k){
visinhoProx = which(distancias == min(distancias, na.rm = TRUE), arr.ind = TRUE)
distancias[visinhoProx] = NA
classeVisinhos[iClass] = classes[visinhoProx]
}
classificacaoAmostra[iAmostra] = getmode(classeVisinhos)
distancias = c()
classeVisinhos = c()
classificacaoAmostra = c()
for(iAmostra in 1:dim(amostras)[1]){
for(iGrupo in  1:dim(grupo)[1]){
distancias[iGrupo] = distanciaCheby(grupo[iGrupo,], amostras[iAmostra,])
}
for(iClass in 1:k){
visinhoProx = which(distancias == min(distancias, na.rm = TRUE), arr.ind = TRUE)
distancias[visinhoProx] = NA
classeVisinhos[iClass] = classes[visinhoProx]
}
classificacaoAmostra[iAmostra] = getmode(classeVisinhos)
}
distancias = c()
classeVisinhos = c()
classificacaoAmostra = c()
iAmostra = 1
for(iGrupo in  1:dim(grupo)[1]){
distancias[iGrupo] = distanciaCheby(grupo[iGrupo,], amostras[iAmostra,])
}
for(iClass in 1:k){
visinhoProx = which(distancias == min(distancias, na.rm = TRUE), arr.ind = TRUE)
distancias[visinhoProx] = NA
classeVisinhos[iClass] = classes[visinhoProx]
}
classificacaoAmostra[iAmostra] = getmode(classeVisinhos)
dim(amostras)[1]
iAmostra = 2
for(iGrupo in  1:dim(grupo)[1]){
distancias[iGrupo] = distanciaCheby(grupo[iGrupo,], amostras[iAmostra,])
}
distancias = c()
classeVisinhos = c()
classificacaoAmostra = c()
for(iAmostra in 1:dim(amostras)[1]){
for(iGrupo in  1:dim(grupo)[1]){
distancias[iGrupo] = distanciaCheby(grupo[iGrupo,], amostras[iAmostra,])
}
for(iClass in 1:3){
visinhoProx = which(distancias == min(distancias, na.rm = TRUE), arr.ind = TRUE)
distancias[visinhoProx] = NA
classeVisinhos[iClass] = classes[visinhoProx]
}
classificacaoAmostra[iAmostra] = getmode(classeVisinhos)
}
distancias = c()
classeVisinhos = c()
classificacaoAmostra = c()
iAmostra = 1
for(iGrupo in  1:dim(grupo)[1]){
distancias[iGrupo] = distanciaCheby(grupo[iGrupo,], amostras[iAmostra,])
}
iClass = 1
visinhoProx = which(distancias == min(distancias, na.rm = TRUE), arr.ind = TRUE)
distancias[visinhoProx] = NA
classeVisinhos[iClass] = classes[visinhoProx]
iClass = 2
visinhoProx = which(distancias == min(distancias, na.rm = TRUE), arr.ind = TRUE)
distancias[visinhoProx] = NA
classeVisinhos[iClass] = classes[visinhoProx]
visinhoProx = which(distancias == min(distancias, na.rm = TRUE), arr.ind = TRUE)
iClass = 3
distancias[visinhoProx] = NA
classeVisinhos[iClass] = classes[visinhoProx]
for(iClass in 1:3){
visinhoProx = which(distancias == min(distancias, na.rm = TRUE), arr.ind = TRUE)
distancias[visinhoProx] = NA
classeVisinhos[iClass] = classes[visinhoProx]
}
classificacaoAmostra[iAmostra] = getmode(classeVisinhos)
iAmostra = 2
for(iGrupo in  1:dim(grupo)[1]){
distancias[iGrupo] = distanciaCheby(grupo[iGrupo,], amostras[iAmostra,])
}
iClass = 1
visinhoProx = which(distancias == min(distancias, na.rm = TRUE), arr.ind = TRUE)
distancias[visinhoProx] = NA
classeVisinhos[iClass] = classes[visinhoProx]
for(iClass in 1:3){
visinhoProx = which(distancias == min(distancias, na.rm = TRUE), arr.ind = TRUE)
distancias[visinhoProx] = NA
classeVisinhos[iClass] = classes[visinhoProx]
}
classificacaoAmostra[iAmostra] = getmode(classeVisinhos)
distancias = c()
classeVisinhos = c()
classificacaoAmostra = c()
for(iAmostra in 1:dim(amostras)[1]){
for(iGrupo in  1:dim(grupo)[1]){
distancias[iGrupo] = distanciaCheby(grupo[iGrupo,], amostras[iAmostra,])
}
for(iClass in 1:3){
visinhoProx = which(distancias == min(distancias, na.rm = TRUE), arr.ind = TRUE)
distancias[visinhoProx] = NA
classeVisinhos[iClass] = classes[visinhoProx]
}
classificacaoAmostra[iAmostra] = getmode(classeVisinhos)
}
distancias = c()
classeVisinhos = c()
classificacaoAmostra = c()
for(iAmostra in 1:dim(amostras)[1]){
for(iGrupo in  1:dim(grupo)[1]){
distancias[iGrupo] = distanciaCheby(grupo[iGrupo,], amostras[iAmostra,])
}
for(iClass in 1:3){
visinhoProx = which(distancias == min(distancias, na.rm = TRUE), arr.ind = TRUE)
distancias[visinhoProx] = NA
classeVisinhos[iClass] = classes[visinhoProx]
}
classificacaoAmostra[iAmostra] = getmode(classeVisinhos)
}
rm(list = ls())
#funções
criaGaussianaClassificada <- function(centro, numero, desvio, classe){
retList = list()
retList$gaussiana = matrix(rnorm(numAmostrasGaussiana*2), ncol=2)*sd + t(matrix(centro, nrow = 2, ncol = numAmostrasGaussiana))
retList$classe = matrix(classe, ncol = 1, nrow = numAmostrasGaussiana) #Classifica
return(retList)
}
source("KNN.R")
numAmostrasGaussiana = 100
sd = 0.3
gaussiana1 = criaGaussianaClassificada(c(2,2), numAmostrasGaussiana, sd, 1)#verde
gaussiana2 = criaGaussianaClassificada(c(4,2), numAmostrasGaussiana, sd, 2)#azul
gaussiana3 = criaGaussianaClassificada(c(2,4), numAmostrasGaussiana, sd, 3)#vermelho
gaussiana4 = criaGaussianaClassificada(c(4,4), numAmostrasGaussiana, sd, 4)#amarelo
#Vector com todas as gaussianas e classes
gaussianas = rbind(gaussiana1$gaussiana, gaussiana2$gaussiana, gaussiana3$gaussiana, gaussiana4$gaussiana)
classes = rbind(gaussiana1$classe, gaussiana2$classe, gaussiana3$classe, gaussiana4$classe)
#Cria amostras para classificação
numAmostras = 2
sdAmostra = 2
amostras = matrix((runif(numAmostras*2) - 0.5), ncol = 2)*sdAmostra +
t(matrix(c(3, 3), nrow = 2, ncol = numAmostras))
cores = c("green", "blue", "red", "yellow", "black")
#Plotagem sem classificação
plot(gaussianas, col = cores[classes], xlim = c(0,6), ylim = c(0,6), xlab ="X1", ylab = "X2")
points(amostras, col = cores[5])
classeAmostra = KNN(gaussianas, classes, amostras, K = 3)
source("KNN.R")
classeAmostra = KNN(gaussianas, classes, amostras, K = 3)
plot(gaussianas, col = cores[classes], xlim = c(0,6), ylim = c(0,6), xlab ="X1", ylab = "X2")
points(amostras, col = cores[classeAmostra])
?plot
as.character(sd)
"desvio" + as.character(sd)
as.array(sd)
source("C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX3/Rcode/EX3.R", encoding = 'UTF-8')
source("C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX3/Rcode/EX3.R", encoding = 'UTF-8')
sd = 0.3
= criaGaussianaClassificada(c(2,2), numAmostrasGaussiana, sd, 1)#verde
gaussiana2 = criaGaussianaClassificada(c(4,2), numAmostrasGaussiana, sd, 2)#azul
gaussiana3 = criaGaussianaClassificada(c(2,4), numAmostrasGaussiana, sd, 3)#vermelho
gaussiana4 = criaGaussianaClassificada(c(4,4), numAmostrasGaussiana, sd, 4)#amarelo
#Vector com todas as gaussianas e classes
gaussianas = rbind(gaussiana1$gaussiana, gaussiana2$gaussiana, gaussiana3$gaussiana, gaussiana4$gaussiana)
classes = rbind(gaussiana1$classe, gaussiana2$classe, gaussiana3$classe, gaussiana4$classe)
#Cria amostras para classificação
numAmostras = 20
sdAmostra = 2
amostras = matrix((runif(numAmostras*2) - 0.5), ncol = 2)*sdAmostra +
t(matrix(c(3, 3), nrow = 2, ncol = numAmostras))
cores = c("green", "blue", "red", "yellow", "black")
#Plotagem sem classific
#Plotagem sem classificação
plot(gaussianas, col = cores[classes], xlim = c(0,6), ylim = c(0,6), xlab ="X1", ylab = "X2",
title(main = "Pontos sem classificação", sub = paste("K: ",as.character(K)," Desvio padrão: ", as.character(sd))))
points(amostras, col = cores[5])
gaussiana1 = criaGaussianaClassificada(c(2,2), numAmostrasGaussiana, sd, 1)#verde
gaussiana2 = criaGaussianaClassificada(c(4,2), numAmostrasGaussiana, sd, 2)#azul
gaussiana3 = criaGaussianaClassificada(c(2,4), numAmostrasGaussiana, sd, 3)#vermelho
gaussiana4 = criaGaussianaClassificada(c(4,4), numAmostrasGaussiana, sd, 4)#amarelo
#Vector com todas as gaussianas e classes
gaussianas = rbind(gaussiana1$gaussiana, gaussiana2$gaussiana, gaussiana3$gaussiana, gaussiana4$gaussiana)
classes = rbind(gaussiana1$classe, gaussiana2$classe, gaussiana3$classe, gaussiana4$classe)
#Cria amostras para classificação
numAmostras = 20
sdAmostra = 2
amostras = matrix((runif(numAmostras*2) - 0.5), ncol = 2)*sdAmostra +
t(matrix(c(3, 3), nrow = 2, ncol = numAmostras))
cores = c("green", "blue", "red", "yellow", "black")
#Plotagem
#Plotagem sem classificação
plot(gaussianas, col = cores[classes], xlim = c(0,6), ylim = c(0,6), xlab ="X1", ylab = "X2",
title(main = "Pontos sem classificação", sub = paste("K: ",as.character(K)," Desvio padrão: ", as.character(sd))))
points(amostras, col = cores[5])
classeAmostra = KNN(gaussianas, classes, amostras, K)
plot(gaussianas, col = cores[classes], xlim = c(0,6), ylim = c(0,6), xlab ="X1", ylab = "X2",
title(main = "Pontos com classificação", sub = paste("K: ",as.character(K)," Desvio padrão: ", as.character(sd))))
points(amostras, col = cores[classeAmostra])
for(K in c(2, 4, 8)){
gaussiana1 = criaGaussianaClassificada(c(2,2), numAmostrasGaussiana, sd, 1)#verde
gaussiana2 = criaGaussianaClassificada(c(4,2), numAmostrasGaussiana, sd, 2)#azul
gaussiana3 = criaGaussianaClassificada(c(2,4), numAmostrasGaussiana, sd, 3)#vermelho
gaussiana4 = criaGaussianaClassificada(c(4,4), numAmostrasGaussiana, sd, 4)#amarelo
#Vector com todas as gaussianas e classes
gaussianas = rbind(gaussiana1$gaussiana, gaussiana2$gaussiana, gaussiana3$gaussiana, gaussiana4$gaussiana)
classes = rbind(gaussiana1$classe, gaussiana2$classe, gaussiana3$classe, gaussiana4$classe)
#Cria amostras para classificação
numAmostras = 20
sdAmostra = 2
amostras = matrix((runif(numAmostras*2) - 0.5), ncol = 2)*sdAmostra +
t(matrix(c(3, 3), nrow = 2, ncol = numAmostras))
cores = c("green", "blue", "red", "yellow", "black")
#Plotagem sem classificação
plot(gaussianas, col = cores[classes], xlim = c(0,6), ylim = c(0,6), xlab ="X1", ylab = "X2",
title(main = "Pontos sem classificação", sub = paste("K: ",as.character(K)," Desvio padrão: ", as.character(sd))))
points(amostras, col = cores[5])
classeAmostra = KNN(gaussianas, classes, amostras, K)
plot(gaussianas, col = cores[classes], xlim = c(0,6), ylim = c(0,6), xlab ="X1", ylab = "X2",
title(main = "Pontos com classificação", sub = paste("K: ",as.character(K)," Desvio padrão: ", as.character(sd))))
points(amostras, col = cores[classeAmostra])
}
#Plotagem sem classificação
plot(gaussianas, col = cores[classes], xlim = c(0,6), ylim = c(0,6), xlab ="X1", ylab = "X2",
title(main = "Pontos sem classificação", sub = paste("K: ",as.character(K),"    Desvio padrão: ", as.character(sd))))
#Plotagem sem classificação
plot(gaussianas, col = cores[classes], xlim = c(0,6), ylim = c(0,6), xlab ="X1", ylab = "X2",
main = "Pontos sem classificação", sub = paste("K: ",as.character(K),"    Desvio padrão: ", as.character(sd)))
points(amostras, col = cores[5])
plot(gaussianas, col = cores[classes], xlim = c(0,6), ylim = c(0,6), xlab ="X1", ylab = "X2",
title(main = "Pontos com classificação", sub = paste("K: ",as.character(K)," Desvio padrão: ", as.character(sd))))
points(amostras, col = cores[classeAmostra])
plot(gaussianas, col = cores[classes], xlim = c(0,6), ylim = c(0,6), xlab ="X1", ylab = "X2",
main = "Pontos com classificação", sub = paste("K: ",as.character(K)," Desvio padrão: ", as.character(sd)))
points(amostras, col = cores[classeAmostra])
source("C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX3/Rcode/EX3.R", encoding = 'UTF-8')
source("C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX3/Rcode/EX3.R", encoding = 'UTF-8')
#Cria amostras para classificação
numAmostras = 20
sdAmostra = 0.1
amostras = matrix((runif(numAmostras*2) - 0.5), ncol = 2)*sdAmostra +
t(matrix(c(3, 3), nrow = 2, ncol = numAmostras))
#Plotagem sem classificação
plot(gaussianas, col = cores[classes], xlim = c(0,6), ylim = c(0,6), xlab ="X1", ylab = "X2",
main = "Pontos sem classificação", sub = paste("K: ",as.character(K),"    Desvio padrão: ", as.character(sd)))
points(amostras, col = cores[5])
amostras = matrix((runif(numAmostras*2) - 0.5), ncol = 2)*sdAmostra +
t(matrix(c(3, 3), nrow = 2, ncol = numAmostras))
points(amostras, col = cores[5])
sdAmostra = 2
amostras = matrix((runif(numAmostras*2) - 0.5), ncol = 2)*sdAmostra +
t(matrix(c(3, 3), nrow = 2, ncol = numAmostras))
points(amostras, col = cores[5])
amostras = matrix((runif(numAmostras*2) - 0.5), ncol = 2)*sdAmostra +
t(matrix(c(3, 3), nrow = 2, ncol = numAmostras))
#Plotagem sem classificação
plot(gaussianas, col = cores[classes], xlim = c(0,6), ylim = c(0,6), xlab ="X1", ylab = "X2",
main = "Pontos sem classificação", sub = paste("K: ",as.character(K),"    Desvio padrão: ", as.character(sd)))
points(amostras, col = cores[5])
sd = 0.2
gaussiana1 = criaGaussianaClassificada(c(2,2), numAmostrasGaussiana, sd, 1)#verde
gaussiana2 = criaGaussianaClassificada(c(4,2), numAmostrasGaussiana, sd, 2)#azul
gaussiana3 = criaGaussianaClassificada(c(2,4), numAmostrasGaussiana, sd, 3)#vermelho
gaussiana4 = criaGaussianaClassificada(c(4,4), numAmostrasGaussiana, sd, 4)#amarelo
#Vector com todas as gaussianas e classes
gaussianas = rbind(gaussiana1$gaussiana, gaussiana2$gaussiana, gaussiana3$gaussiana, gaussiana4$gaussiana)
classes = rbind(gaussiana1$classe, gaussiana2$classe, gaussiana3$classe, gaussiana4$classe)
#Cria amostras para classificação
numAmostras = 20
sdAmostra = 4
amostras = matrix((runif(numAmostras*2) - 0.5), ncol = 2)*sdAmostra +
t(matrix(c(3, 3), nrow = 2, ncol = numAmostras))
cores = c("green", "blue", "red", "yellow", "black")
#Plotagem sem classificação
plot(gaussianas, col = cores[classes], xlim = c(0,6), ylim = c(0,6), xlab ="X1", ylab = "X2",
main = "Pontos sem classificação", sub = paste("K: ",as.character(K),"    Desvio padrão: ", as.character(sd)))
points(amostras, col = cores[5])
amostras = matrix((runif(numAmostras*2) - 0.5), ncol = 2)*sdAmostra +
t(matrix(c(3, 3), nrow = 2, ncol = numAmostras))
#Plotagem sem classificação
plot(gaussianas, col = cores[classes], xlim = c(0,6), ylim = c(0,6), xlab ="X1", ylab = "X2",
main = "Pontos sem classificação", sub = paste("K: ",as.character(K),"    Desvio padrão: ", as.character(sd)))
points(amostras, col = cores[5])
sdAmostra = 3
amostras = matrix((runif(numAmostras*2) - 0.5), ncol = 2)*sdAmostra +
t(matrix(c(3, 3), nrow = 2, ncol = numAmostras))
s
s
#Plotagem sem classificação
plot(gaussianas, col = cores[classes], xlim = c(0,6), ylim = c(0,6), xlab ="X1", ylab = "X2",
main = "Pontos sem classificação", sub = paste("K: ",as.character(K),"    Desvio padrão: ", as.character(sd)))
points(amostras, col = cores[5])
runif(5*2)
runif(5*2) -0.5
source("C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX3/Rcode/EX3.R", encoding = 'UTF-8')
cores = c("green", "blue", "#FF00FF", "yellow", "black")
#Plotagem sem classificação
plot(gaussianas, col = cores[classes], xlim = c(0,6), ylim = c(0,6), xlab ="X1", ylab = "X2",
main = "Pontos sem classificação", sub = paste("K: ",as.character(K),"    Desvio padrão: ", as.character(sd)))
points(amostras, col = cores[5])
cores = c("green", "blue", "#FF00FF", "yellow", "red")
#Plotagem sem classificação
plot(gaussianas, col = cores[classes], xlim = c(0,6), ylim = c(0,6), xlab ="X1", ylab = "X2",
main = "Pontos sem classificação", sub = paste("K: ",as.character(K),"    Desvio padrão: ", as.character(sd)))
points(amostras, col = cores[5])
?poits
?points
cores = c("green", "blue", "red", "yellow", "#FF00FF")
#Plotagem sem classificação
plot(gaussianas, col = cores[classes], xlim = c(0,6), ylim = c(0,6), xlab ="X1", ylab = "X2",
main = "Pontos sem classificação", sub = paste("K: ",as.character(K),"    Desvio padrão: ", as.character(sd)))
points(amostras, col = cores[5], bg = "black")
cores = c("green", "blue", "red", "yellow", "black")
#Plotagem sem classificação
plot(gaussianas, col = cores[classes], xlim = c(0,6), ylim = c(0,6), xlab ="X1", ylab = "X2",
main = "Pontos sem classificação", sub = paste("K: ",as.character(K),"    Desvio padrão: ", as.character(sd)))
points(amostras, col = cores[5], bg = "black")
points(amostras, col = cores[5], pch = 19)
plot(gaussianas, col = cores[classes], xlim = c(0,6), ylim = c(0,6), xlab ="X1", ylab = "X2",
main = "Pontos com classificação", sub = paste("K: ",as.character(K)," Desvio padrão: ", as.character(sd)))
points(amostras, col = cores[classeAmostra], pch = 19)
cores = c("green", "blue", "red", "pink", "black")
#Plotagem sem classificação
plot(gaussianas, col = cores[classes], xlim = c(0,6), ylim = c(0,6), xlab ="X1", ylab = "X2",
main = "Pontos sem classificação", sub = paste("K: ",as.character(K),"    Desvio padrão: ", as.character(sd)))
points(amostras, col = cores[5], pch = 19)
classeAmostra = KNN(gaussianas, classes, amostras, K)
plot(gaussianas, col = cores[classes], xlim = c(0,6), ylim = c(0,6), xlab ="X1", ylab = "X2",
main = "Pontos com classificação", sub = paste("K: ",as.character(K)," Desvio padrão: ", as.character(sd)))
points(amostras, col = cores[classeAmostra], pch = 19)
PuRd
PuRd()
?brewer
display.brewer.all()
cores = c("green", "blue", "red", "#8B008B", "black")
#Plotagem sem classificação
plot(gaussianas, col = cores[classes], xlim = c(0,6), ylim = c(0,6), xlab ="X1", ylab = "X2",
main = "Pontos sem classificação", sub = paste("K: ",as.character(K),"    Desvio padrão: ", as.character(sd)))
points(amostras, col = cores[5], pch = 19)
classeAmostra = KNN(gaussianas, classes, amostras, K)
plot(gaussianas, col = cores[classes], xlim = c(0,6), ylim = c(0,6), xlab ="X1", ylab = "X2",
main = "Pontos com classificação", sub = paste("K: ",as.character(K)," Desvio padrão: ", as.character(sd)))
points(amostras, col = cores[classeAmostra], pch = 19)
source("C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX3/Rcode/EX3.R", encoding = 'UTF-8')
?png
#Plotagem sem classificação
png(paste("IMG/",as.character(k),"-",as.character(sd),"-SEM"))
#Plotagem sem classificação
png(paste("IMG/",as.character(K),"-",as.character(sd),"-SEM"))
#Plotagem sem classificação
png(paste(as.character(K),"-",as.character(sd),"-SEM"))
plot(gaussianas, col = cores[classes], xlim = c(0,6), ylim = c(0,6), xlab ="X1", ylab = "X2",
main = "Pontos sem classificação", sub = paste("K: ",as.character(K),"    Desvio padrão: ", as.character(sd)))
points(amostras, col = cores[5], pch = 19)
dev.off()
#Plotagem sem classificação
png(paste(as.character(K),"-",as.character(sd),"-SEM.png"))
plot(gaussianas, col = cores[classes], xlim = c(0,6), ylim = c(0,6), xlab ="X1", ylab = "X2",
main = "Pontos sem classificação", sub = paste("K: ",as.character(K),"    Desvio padrão: ", as.character(sd)))
points(amostras, col = cores[5], pch = 19)
dev.off()
#Plotagem sem classificação
png(paste("IMG/",as.character(K),as.character(sd),"SEM.png"))
#Plotagem sem classificação
png(paste("IMG/",as.character(K),as.character(sd),"SEM.png"))
plot(gaussianas, col = cores[classes], xlim = c(0,6), ylim = c(0,6), xlab ="X1", ylab = "X2",
main = "Pontos sem classificação", sub = paste("K: ",as.character(K),"    Desvio padrão: ", as.character(sd)))
points(amostras, col = cores[5], pch = 19)
dev.off()
source("C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX3/Rcode/EX3.R", encoding = 'UTF-8')
source("C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX3/Rcode/EX3.R", encoding = 'UTF-8')
source("C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX3/Rcode/EX3.R", encoding = 'UTF-8')
source("C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX3/Rcode/EX3.R", encoding = 'UTF-8')
source("C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX3/Rcode/EX3.R", encoding = 'UTF-8')
source("C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX3/Rcode/EX3.R", encoding = 'UTF-8')
source("C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX3/Rcode/EX3.R", encoding = 'UTF-8')
