#adiciona bibliotecas e codigos necessários
library("jpeg")
library("imager")
source("templateMatching.R")
#Tratamento das imagens
#importa figruras e transforma em escala de cinza
placas = grayscale(load.image("placas.jpg"), method = "Luma", drop = TRUE)
placa1 = grayscale(load.image("placa_1.jpg"), method = "Luma", drop = TRUE)
placa2 = grayscale(load.image("placa_2.jpg"), method = "Luma", drop = TRUE)
#Seleciona apenas os valores excluindo a profundidade e escala de cor
placas = placas[,,1,1]
placa1 = placa1[,,1,1]
placa2 = placa2[,,1,1]
# Inverte figura do avesso
placas = t(apply(placas, 1, rev))
placa1 = t(apply(placa1, 1, rev))
placa2 = t(apply(placa2, 1, rev))
#Mostra resultado depois das adequações
escalaCinza = rev(gray(100:1/100)) #Vetor de 100 valores de cinza diferente
image(placas,col = escalaCinza)
image(placa1,col = escalaCinza)
image(placa2,col = escalaCinza)
matrizDiff = templateMatching(placa1,placas)
posicaoPlaca = which((matrizDiff == min(matrizDiff)),arr.ind = TRUE)
contour(matrizDiff)
for(l in posicaoPlaca[1]:(posicaoPlaca[1]+160)){
placas[l,posicaoPlaca[2]] = 1
placas[l,(posicaoPlaca[2] + 85)] = 1
}
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/templateMatching.R', encoding = 'UTF-8')
resultado = templateMatching(placa1,placas)
matrizDiff = resultado[[1]]
posicaoPlaca = resultado[[2]]
contour(matrizDiff)
1:3:5
image(placas,col = escalaCinza)
placas[(posicaoPlaca[1]-5):(posicaoPlaca[1]+5),(posicaoPlaca[1]-5):(posicaoPlaca[1]+5)] = matrix(1,10,10)
placas[(posicaoPlaca[1]-5):(posicaoPlaca[1]+5),(posicaoPlaca[1]-5):(posicaoPlaca[1]+5)] = matrix(1,11,11)
#Tratamento das imagens
#importa figruras e transforma em escala de cinza
placas = grayscale(load.image("placas.jpg"), method = "Luma", drop = TRUE)
#Seleciona apenas os valores excluindo a profundidade e escala de cor
placas = placas[,,1,1]
# Inverte figura do avesso
placas = t(apply(placas, 1, rev))
placas[(posicaoPlaca[1]-5):(posicaoPlaca[1]+5),(posicaoPlaca[1]-5):(posicaoPlaca[1]+5)] = matrix(1,11,11)
image(placas,col = escalaCinza)
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/templateMatching.R', encoding = 'UTF-8')
rm( list = ls())
#adiciona bibliotecas e codigos necessários
library("jpeg")
library("imager")
source("templateMatching.R")
#Tratamento das imagens
#importa figruras e transforma em escala de cinza
placas = grayscale(load.image("placas.jpg"), method = "Luma", drop = TRUE)
placa1 = grayscale(load.image("placa_1.jpg"), method = "Luma", drop = TRUE)
placa2 = grayscale(load.image("placa_2.jpg"), method = "Luma", drop = TRUE)
#Seleciona apenas os valores excluindo a profundidade e escala de cor
placas = placas[,,1,1]
placa1 = placa1[,,1,1]
placa2 = placa2[,,1,1]
# Inverte figura do avesso
placas = t(apply(placas, 1, rev))
placa1 = t(apply(placa1, 1, rev))
placa2 = t(apply(placa2, 1, rev))
#Mostra resultado depois das adequações
escalaCinza = rev(gray(100:1/100)) #Vetor de 100 valores de cinza diferente
image(placas,col = escalaCinza)
resultado = templateMatching(placa1,placas)
matrizDiff = resultado[[1]]
posicaoPlaca = resultado[[2]]
placas[(posicaoPlaca[1]-5):(posicaoPlaca[1]+5),(posicaoPlaca[1]-5):(posicaoPlaca[1]+5)] = matrix(1,11,11)
image(placas,col = escalaCinza)
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/templateMatching.R', encoding = 'UTF-8')
resultado = templateMatching(placa1,placas)
matrizDiff = resultado[[1]]
posicaoPlaca = resultado[[2]]
placas[(posicaoPlaca[1]-5):(posicaoPlaca[1]+5),(posicaoPlaca[1]-5):(posicaoPlaca[1]+5)] = matrix(1,11,11)
image(placas,col = escalaCinza)
posicaoPlaca[2] = 86/2 + posicaoPlaca[2]
placas[(posicaoPlaca[1]-5):(posicaoPlaca[1]+5),(posicaoPlaca[1]-5):(posicaoPlaca[1]+5)] = matrix(1,11,11)
image(placas,col = escalaCinza)
image(placas,col = escalaCinza)
#Tratamento das imagens
#importa figruras e transforma em escala de cinza
placas = grayscale(load.image("placas.jpg"), method = "Luma", drop = TRUE)
placa2 = placa2[,,1,1]
# Inverte figura do avesso
placas = t(apply(placas, 1, rev))
placas[(posicaoPlaca[1]-5):(posicaoPlaca[1]+5),(posicaoPlaca[1]-5):(posicaoPlaca[1]+5)] = matrix(1,11,11)
image(placas,col = escalaCinza)
dim(placa1)
placas[(posicaoPlaca[1]-5):(posicaoPlaca[1]+5),(posicaoPlaca[2]-5):(posicaoPlaca[2]+5)] = matrix(1,11,11)
image(placas,col = escalaCinza)
resultado = templateMatching(placa1,placas)
matrizDiff = resultado[[1]]
posicaoPlaca = resultado[[2]]
posicaoPlaca = dim(placa1)/2 + posicaoPlaca
placas[(posicaoPlaca[1]-5):(posicaoPlaca[1]+5),(posicaoPlaca[2]-5):(posicaoPlaca[2]+5)] = matrix(1,11,11)
image(placas,col = escalaCinza)
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/templateMatching.R', encoding = 'UTF-8')
rm( list = ls())
#adiciona bibliotecas e codigos necessários
library("jpeg")
library("imager")
source("templateMatching.R")
#Tratamento das imagens
#importa figruras e transforma em escala de cinza
placas = grayscale(load.image("placas.jpg"), method = "Luma", drop = TRUE)
placa1 = grayscale(load.image("placa_1.jpg"), method = "Luma", drop = TRUE)
placa2 = grayscale(load.image("placa_2.jpg"), method = "Luma", drop = TRUE)
#Seleciona apenas os valores excluindo a profundidade e escala de cor
placas = placas[,,1,1]
placa1 = placa1[,,1,1]
placa2 = placa2[,,1,1]
# Inverte figura do avesso
placas = t(apply(placas, 1, rev))
placa1 = t(apply(placa1, 1, rev))
placa2 = t(apply(placa2, 1, rev))
#Mostra resultado depois das adequações
escalaCinza = rev(
#Mostra resultado depois das adequações
escalaCinza = rev(gray(100:1/100)) #Vetor de 100 valores de cinza diferente
sultado = templateMatching(placa1,placas)
matrizDiff = resultado[[1]]
pos
resultado = templateMatching(placa1,placas)
matrizDiff = resultado[[1]]
posicaoPlaca = resultado[[2]]
image(placas,col = escalaCinza)
#Mostra resultado depois das adequações
escalaCinza = rev(gray(100:1/100)) #Vetor de 100 valores de cinza diferente
image(placas,col = escalaCinza)
placas[(posicaoPlaca[1]-5):(posicaoPlaca[1]+5),(posicaoPlaca[2]-5):(posicaoPlaca[2]+5)] = matrix(1,11,11)
image(placas,col = escalaCinza)
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/templateMatching.R', encoding = 'UTF-8')
placas = identificaPlaca(placas, dim(placa1), posicaoPlaca)
image(placas,col = escalaCinza)
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/templateMatching.R', encoding = 'UTF-8')
placas = identificaPlaca(placas, dim(placa1), posicaoPlaca)
#Tratamento das imagens
#importa figruras e transforma em escala de cinza
placas = grayscale(load.image("placas.jpg"), method = "Luma", drop = TRUE)
#Seleciona apenas os valores excluindo a profundidade e escala de cor
placas = placas[,,1,1]
# Inverte figura do avesso
placas = t(apply(placas, 1, rev))
placas = identificaPlaca(placas, dim(placa1), posicaoPlaca)
image(placas,col = escalaCinza)
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/templateMatching.R', encoding = 'UTF-8')
#Tratamento das imagens
#importa figruras e transforma em escala de cinza
placas = grayscale(load.image("placas.jpg"), method = "Luma", drop = TRUE)
#Seleciona apenas os valores excluindo a profundidade e escala de cor
placas = placas[,,1,1]
# Inverte figura do avesso
placas = t(apply(placas, 1, rev))
placas = identificaPlaca(placas, dim(placa1), posicaoPlaca)
image(placas,col = escalaCinza)
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/EX2.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/EX2.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/EX2.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/EX2.R', encoding = 'UTF-8')
escalaCinza[100] = "FF0000"
image(identificaPlaca(placas, dim(placa2), posicaoPlaca2),col = escalaCinza)
escalaCinza[100] = "#FF0000"
image(identificaPlaca(placas, dim(placa2), posicaoPlaca2),col = escalaCinza)
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/templateMatching.R', encoding = 'UTF-8')
placas = identificaPlaca(placas, dim(placa1), posicaoPlaca1)
image(identificaPlaca(placas, dim(placa2), posicaoPlaca2),col = escalaCinza)
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/templateMatching.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/EX2.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/templateMatching.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/EX2.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/templateMatching.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/templateMatching.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/EX2.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/templateMatching.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/EX2.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/templateMatching.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/EX2.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/metricas.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/EX2.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/templateMatching.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/EX2.R', encoding = 'UTF-8')
source("metricas.R")
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/EX2.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/templateMatching.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/EX2.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/templateMatching.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/EX2.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/EX2.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/EX2.R', encoding = 'UTF-8')
reds
reds()
color
pallet
palette()
palette()
redDegree = colorRampPalette(c("red","yellow"))
redDegree(100)
image(matrizDist, col = redDegree(100))
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/EX2.R', encoding = 'UTF-8')
2^2
2^(1/2)
image(matrizDist, col = redDegree(50))
contour(matrizDist)#Contorno
plot(matrizDist)
plot3D(matrizDist)
persp(matrizDist)
image(matrizDist, col = redDegree(10))
persp(matrizDist, col = redDegree(50))
?persp
persp(matrizDist, col = redDegree(50), theta = 45)
persp(matrizDist, col = redDegree(50), phi = 45)
persp(matrizDist, col = "red", phi = 45)
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/templateMatching.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/EX2.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/EX2.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/templateMatching.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/EX2.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/EX2.R', encoding = 'UTF-8')
cov(placa1)
m = cov(placa1)
cov(palca1,placa2)
cov(placa1,placa2)
cov(placa1,placa1
)
m = cov(placa1,placa1)
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/templateMatching.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/EX2.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/EX2.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/EX2.R', encoding = 'UTF-8')
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/EX2.R', encoding = 'UTF-8')
cov(placa1, placa1)
m = cov(placa1, placa1)
m = cor(placa1, placa1)
m = apply(placa1, 2, cov)
m = apply(placa1, 1, cov)
placa1*placa1
m = placa1*placa1
0.207^2
m = cov(placa1)
placa1 * m
placa1 %*% m
d = placa1 %*% m
d = m %*% placa1
View(placa1)
t(placa1)
d = t(placa1)
source('C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX2/R_Code/EX2.R', encoding = 'UTF-8')
