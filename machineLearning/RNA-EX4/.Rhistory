library("caTools")
set.seed(0)
acurracy <- function(respostas, teste){
return(sum(as.numeric(respostas == teste))/length(respostas))
}
data("iris")
#Cria classes
classe = cbind(matrix(0, ncol = 50), matrix(1, ncol = 100))
acuracias = NULL
maxAcuracia = 0
maxAcuW = NULL
maxAcuErro = NULL
#Amostra 70 de cada classe para compor o treino
sampleTrain = sample.split(classe[classe == 0], SplitRatio = 7/10)
sampleTrain = append(sampleTrain, sample.split(classe[classe == 1], SplitRatio = 7/10))
#Amostra 70 de cada classe para compor o treino
sampleTrain = sample.split(classe[classe == 0], SplitRatio = 7/10)
sampleTrain = append(sampleTrain, sample.split(classe[classe == 1], SplitRatio = 7/10))
#sepra amostras de treino
y_train = classe[sampleTrain]
x_train = iris[sampleTrain, -5]
#separa amostra de teste
y_test = classe[!sampleTrain]
x_test = iris[!sampleTrain, -5]
retList =  treinaPerceptron(x_train, y_train, 0.1, 0.01, 100, 1)
retList =  treinaPerceptron(x_train, y_train, 0.1, 0.01, 100, 1)
matrixEntrada = x_train
vetorResposta = y_train
passoTreino = 0.1
tolerancia = 0.01
maxEpocas = 100
par = 1
dimensaoEntrada <- dim(matrixEntrada)
N <- dimensaoEntrada[1] #Numero de amostras
m <- dimensaoEntrada[2] #Numero de atributos
#Adicionando o termo de polariza??o
if(par == 1){
matrixEntradaAumentada <- cbind(-1,matrixEntrada)
vetorPesos <-as.matrix(runif(m+1) - 0.5)
}else{
matrixEntradaAumentada <- matrixEntrada
vetorPesos <-as.matrix(runif(m) - 0.5)
}
#inicia setup
nEpocas <- 0
erroEpoca <- tolerancia + 1
vetorErros <- matrix(nrow = 1, ncol = N)
erroEpocaAcumulado <- 0
sequenciaAleatoria <- sample(N)
i = 1
instanciaRandomica <- sequenciaAleatoria[i]
#Calcula resposta do perceptron
respostaPerceptron = as.numeric(perceptron(matrixEntradaAumentada[instanciaRandomica,], vetorPesos, 0))
matrixEntradaAumentada[instanciaRandomica,]
vetorPesos
matrixEntradaAumentada[instanciaRandomica,] %*% vetorPesos
as.matrix(matrixEntradaAumentada[instanciaRandomica,])
as.matrix(matrixEntradaAumentada[instanciaRandomica,]) %*% vetorPesos
as.matrix(iris[sampleTrain, -5]) == x_train
rm(list = ls())
source("treinaPerceptron.R")
source("perceptron.R")
library("caTools")
set.seed(0)
acurracy <- function(respostas, teste){
return(sum(as.numeric(respostas == teste))/length(respostas))
}
data("iris")
#Cria classes
classe = cbind(matrix(0, ncol = 50), matrix(1, ncol = 100))
acuracias = NULL
maxAcuracia = 0
maxAcuW = NULL
maxAcuErro = NULL
#Amostra 70 de cada classe para compor o treino
sampleTrain = sample.split(classe[classe == 0], SplitRatio = 7/10)
sampleTrain = append(sampleTrain, sample.split(classe[classe == 1], SplitRatio = 7/10))
#sepra amostras de treino
y_train = classe[sampleTrain]
x_train = as.matrix(iris[sampleTrain, -5])
#separa amostra de teste
y_test = classe[!sampleTrain]
x_test = as.matrix(iris[!sampleTrain, -5])
retList =  treinaPerceptron(x_train, y_train, 0.1, 0.01, 100, 1)
retList =  treinaPerceptron(x_train, y_train, 0.1, 0.001, 100, 1)
w = retList$w
y_estimado = c()
for(i in 1:dim(x_test)[1]){
y_estimado[i] = perceptron(x_test[i,], w, 1)
}
acuracias[i] = acurracy(y_test, y_estimado)
acurracy(y_test, y_estimado)
acuracias[i]
rm(list = ls())
source("treinaPerceptron.R")
source("perceptron.R")
library("caTools")
set.seed(0)
acurracy <- function(respostas, teste){
return(sum(as.numeric(respostas == teste))/length(respostas))
}
data("iris")
#Cria classes
classe = cbind(matrix(0, ncol = 50), matrix(1, ncol = 100))
acuracias = NULL
maxAcuracia = 0
maxAcuW = NULL
maxAcuErro = NULL
#Começa o loop
for(i in 1:100){
#Amostra 70 de cada classe para compor o treino
sampleTrain = sample.split(classe[classe == 0], SplitRatio = 7/10)
sampleTrain = append(sampleTrain, sample.split(classe[classe == 1], SplitRatio = 7/10))
#sepra amostras de treino
y_train = classe[sampleTrain]
x_train = as.matrix(iris[sampleTrain, -5])
#separa amostra de teste
y_test = classe[!sampleTrain]
x_test = as.matrix(iris[!sampleTrain, -5])
retList =  treinaPerceptron(x_train, y_train, 0.1, 0.001, 100, 1)
w = retList$w
y_estimado = c()
for(i in 1:dim(x_test)[1]){
y_estimado[i] = perceptron(x_test[i,], w, 1)
}
acuracias[i] = acurracy(y_test, y_estimado)
if(acuracias[i] > maxAcuracia){
maxAcuracia = acuracias[i]
maxAcuW = w
maxAcuErro = retList$erro
write.table(table(y_test, y_estimado), "IMG/3-confusao.csv", sep = ";", dec = ",")
}
}
print(maxAcuracia)
print(maxAcuW)
print(mean(acuracias))
rm(list = ls())
source("treinaPerceptron.R")
source("perceptron.R")
library("caTools")
set.seed(0)
acurracy <- function(respostas, teste){
return(sum(as.numeric(respostas == teste))/length(respostas))
}
data("iris")
#Cria classes
classe = cbind(matrix(0, ncol = 50), matrix(1, ncol = 100))
acuracias = NULL
maxAcuracia = 0
maxAcuW = NULL
maxAcuErro = NULL
#Começa o loop
for(i in 1:100){
#Amostra 70 de cada classe para compor o treino
sampleTrain = sample.split(classe[classe == 0], SplitRatio = 7/10)
sampleTrain = append(sampleTrain, sample.split(classe[classe == 1], SplitRatio = 7/10))
#sepra amostras de treino
y_train = classe[sampleTrain]
x_train = as.matrix(iris[sampleTrain, -5])
#separa amostra de teste
y_test = classe[!sampleTrain]
x_test = as.matrix(iris[!sampleTrain, -5])
retList =  treinaPerceptron(x_train, y_train, 0.1, 0.001, 100, 1)
w = retList$w
y_estimado = c()
for(j in 1:dim(x_test)[1]){
y_estimado[j] = perceptron(x_test[i,], w, 1)
}
acuracias[i] = acurracy(y_test, y_estimado)
if(acuracias[i] > maxAcuracia){
maxAcuracia = acuracias[i]
maxAcuW = w
maxAcuErro = retList$erro
write.table(table(y_test, y_estimado), "IMG/3-confusao.csv", sep = ";", dec = ",")
}
}
print(maxAcuracia)
print(maxAcuW)
rm(list = ls())
source("treinaPerceptron.R")
source("perceptron.R")
library("caTools")
set.seed(0)
acurracy <- function(respostas, teste){
return(sum(as.numeric(respostas == teste))/length(respostas))
}
data("iris")
#Cria classes
classe = cbind(matrix(0, ncol = 50), matrix(1, ncol = 100))
acuracias = NULL
maxAcuracia = 0
maxAcuW = NULL
maxAcuErro = NULL
#Começa o loop
for(i in 1:100){
#Amostra 70 de cada classe para compor o treino
sampleTrain = sample.split(classe[classe == 0], SplitRatio = 7/10)
sampleTrain = append(sampleTrain, sample.split(classe[classe == 1], SplitRatio = 7/10))
#sepra amostras de treino
y_train = classe[sampleTrain]
x_train = as.matrix(iris[sampleTrain, -5])
#separa amostra de teste
y_test = classe[!sampleTrain]
x_test = as.matrix(iris[!sampleTrain, -5])
retList =  treinaPerceptron(x_train, y_train, 0.1, 0.001, 100, 1)
w = retList$w
y_estimado = c()
for(j in 1:dim(x_test)[1]){
y_estimado[j] = perceptron(x_test[j,], w, 1)
}
acuracias[i] = acurracy(y_test, y_estimado)
if(acuracias[i] > maxAcuracia){
maxAcuracia = acuracias[i]
maxAcuW = w
maxAcuErro = retList$erro
write.table(table(y_test, y_estimado), "IMG/3-confusao.csv", sep = ";", dec = ",")
}
}
print(maxAcuracia)
print(maxAcuW)
print(mean(acuracias))
print(var(acuracias))
png("IMG/3-erro.png")
plot(maxAcuErro, xlab = "Epoca", ylab = "Erro", main = "Erro de treinamento", type = 'b', pch = 19)
dev.off()
sum(y_train == 1)
sum(y_train == 0)
0.5*150
0.7*150
library(mlbench)
install.packages("mlbench")
library(mlbench)
data("BreastCancer ")
data("BreastCancer")
rm(list = ls())
source("treinaPerceptron.R")
source("perceptron.R")
set.seed(0)
acurracy <- function(respostas, teste){
return(sum(as.numeric(respostas == teste))/length(respostas))
}
data("BreastCancer")
View(BreastCancer)
BreastCancer$Class
as.numeric(BreastCancer$Class)
as.numeric(BreastCancer$Class) - 1
(as.numeric(BreastCancer$Class) - 1) == ifelse(BreastCancer$Class == "benign", 0, 1)
sum(as.numeric(BreastCancer$Class) - 1) == ifelse(BreastCancer$Class == "benign", 0, 1)
sum((as.numeric(BreastCancer$Class) - 1) == ifelse(BreastCancer$Class == "benign", 0, 1))
complete.cases(BreastCancer)
BreastCancer[complete.cases(BreastCancer), 2:10]
dataSet =  BreastCancer[complete.cases(BreastCancer), 2:10]
dataSet =  BreastCancer[complete.cases(BreastCancer), 2:11]
#Cria classes
classe = ifelse(dataSet$Class == "benign", 0, 1)
dataSet[sampleTrain, -Class]
x_train = as.matrix(dataSet[sampleTrain, -10])
#Amostra 70 de cada classe para compor o treino
sampleTrain = sample.split(classe[classe == 0], SplitRatio = 7/10)
sampleTrain = append(sampleTrain, sample.split(classe[classe == 1], SplitRatio = 7/10))
#sepra amostras de treino
y_train = classe[sampleTrain]
x_train = as.matrix(dataSet[sampleTrain, -10])
View(x_train)
x_train[1]
x_train[1,]
View(dataSet)
View(x_train)
x_train = as.matrix(as.numeric(dataSet[sampleTrain, -10]))
as.matrix(dataSet[sampleTrain, -10])
as.numeric(as.matrix(dataSet[sampleTrain, -10]))
as.matrix(dataSet[sampleTrain, -10])[1]
as.matrix(dataSet[sampleTrain, -10])[1,]
x_train = as.numeric(as.matrix(dataSet[sampleTrain, -10]))
x_train[1]
as.matrix(dataSet[sampleTrain, -10])[1] ==  x_train[1]
as.matrix(dataSet[sampleTrain, -10])[1,] ==  x_train[1,]
as.matrix(dataSet[sampleTrain, -10])[1,] ==  x_train[1
}
as.matrix(dataSet[sampleTrain, -10])[1] ==  x_train[1]
as.matrix(dataSet[sampleTrain, -10])[1,] ==  x_train[1]
as.matrix(dataSet[sampleTrain, -10])[1,] ==  x_train[1,]
as.matrix(dataSet[sampleTrain, -10])[1] ==  x_train[1,]
as.matrix(dataSet[sampleTrain, -10])[1] ==  x_train[1,]
x_train[1,]
x_train[]
rm(list = ls())
source("treinaPerceptron.R")
source("perceptron.R")
library("caTools")
set.seed(0)
acurracy <- function(respostas, teste){
return(sum(as.numeric(respostas == teste))/length(respostas))
}
data("iris")
#Cria classes
classe = cbind(matrix(0, ncol = 50), matrix(1, ncol = 100))
acuracias = NULL
maxAcuracia = 0
maxAcuW = NULL
maxAcuErro = NULL
#Amostra 70 de cada classe para compor o treino
sampleTrain = sample.split(classe[classe == 0], SplitRatio = 7/10)
sampleTrain = append(sampleTrain, sample.split(classe[classe == 1], SplitRatio = 7/10))
#sepra amostras de treino
y_train = classe[sampleTrain]
x_train = as.matrix(iris[sampleTrain, -5])
#separa amostra de teste
y_test = classe[!sampleTrain]
x_test = as.matrix(iris[!sampleTrain, -5])
retList =  treinaPerceptron(x_train, y_train, 0.1, 0.001, 100, 1)
w = retList$w
source("treinaPerceptron.R")
source("perceptron.R")
library("caTools") # Funçã sample.split
library(mlbench) #Banco BreastCancer
set.seed(0)
acurracy <- function(respostas, teste){
return(sum(as.numeric(respostas == teste))/length(respostas))
}
data("BreastCancer")
dataSet =  BreastCancer[complete.cases(BreastCancer), 2:11]
#Cria classes
classe = ifelse(dataSet$Class == "benign", 0, 1)
acuracias = NULL
maxAcuracia = 0
maxAcuW = NULL
maxAcuErro = NULL
#Amostra 70 de cada classe para compor o treino
sampleTrain = sample.split(classe[classe == 0], SplitRatio = 7/10)
sampleTrain = append(sampleTrain, sample.split(classe[classe == 1], SplitRatio = 7/10))
#sepra amostras de treino
y_train = classe[sampleTrain]
x_train = as.matrix(dataSet[sampleTrain, -10])
x_train[1]
x_train[1,]
x_train[1,]*1
1*x_train[1,]
1*x_train[1]
x_train[1,1:5]
x_train[1,1:5] %*% w
?as.matrix()
?as.matrix.data.frame()
dataSet = as.matrix(BreastCancer[complete.cases(BreastCancer), 2:11])
View(dataSet)
#Cria classes
classe = ifelse(dataSet$Class == "benign", 0, 1)
dataSet = as.numeric(BreastCancer[complete.cases(BreastCancer), 2:11])
?data()
data("BreastCancer.data")
data("BreastCancer.csv")
unlist(BreastCancer)
as.numeric(BreastCancer[1,])
as.numeric(BreastCancer[])
as.numeric(BreastCancer)
as.numeric(BreastCancer[,1])
as.numeric(BreastCancer[,2])
as.numeric(BreastCancer[,2:3])
?apply()
x = apply(dataSet, 2, as.numeric)
View(x)
classes = BreastCancer[complete.cases(BreastCancer), 11]
#Cria classes
classe = ifelse(classes == "benign", 0, 1)
x = apply(dataSet, 2, as.numeric)
dataSet = BreastCancer[complete.cases(BreastCancer), 2:10]
x = apply(dataSet, 2, as.numeric)
x == dataSet
if(x == dataSet){}
l =(x == dataSet)
witch(l, FALSE)
wich(l, FALSE)
which(l, FALSE)
View(l)
?which(l, FALSE)
?which(l, l == FALSE)
which(l, l == FALSE)
which(l, l == T)
sum(l[,1])
sum(l[,2])
sum(l[,3])
sum(l[,4])
sum(l[,5])
sum(l[,6])
sum(l[,7])
sum(l[,8])
sum(l[,9])
library(mlbench) #Banco BreastCancer
set.seed(0)
rm(list = ls())
source("treinaPerceptron.R")
source("perceptron.R")
library("caTools") # Funçã sample.split
library(mlbench) #Banco BreastCancer
set.seed(0)
acurracy <- function(respostas, teste){
return(sum(as.numeric(respostas == teste))/length(respostas))
}
data("BreastCancer")
dataSet = BreastCancer[complete.cases(BreastCancer), 2:10]
classes = BreastCancer[complete.cases(BreastCancer), 11]
#Cria classes
classe = ifelse(classes == "benign", 0, 1)
dataSet = apply(dataSet, 2, as.numeric)
BreastCancer[,2:10] == dataSet
View(dataSet)
View(BreastCancer)
BreastCancer[1,2:10] == dataSet[1,]
BreastCancer[2,2:10] == dataSet[2,]
BreastCancer[2:10] == dataSet[]
BreastCancer[,2:10] == dataSet[]
BreastCancer[2,2:10] == dataSet[2,]
BreastCancer[1,2:10] == dataSet[1,]
rm(list = ls())
source("treinaPerceptron.R")
source("perceptron.R")
library("caTools") # Funçã sample.split
library(mlbench) #Banco BreastCancer
set.seed(0)
acurracy <- function(respostas, teste){
return(sum(as.numeric(respostas == teste))/length(respostas))
}
data("BreastCancer")
dataSet = BreastCancer[complete.cases(BreastCancer), 2:10]
classes = BreastCancer[complete.cases(BreastCancer), 11]
#Cria classes
classe = ifelse(classes == "benign", 0, 1)
dataSet = apply(dataSet, 2, as.numeric)
acuracias = NULL
maxAcuracia = 0
maxAcuW = NULL
maxAcuErro = NULL
retList =  treinaPerceptron(x_train, y_train, 0.1, 0.001, 100, 1)
#Amostra 70 de cada classe para compor o treino
sampleTrain = sample.split(classe[classe == 0], SplitRatio = 7/10)
sampleTrain = append(sampleTrain, sample.split(classe[classe == 1], SplitRatio = 7/10))
#sepra amostras de treino
y_train = classe[sampleTrain]
x_train = as.matrix(dataSet[sampleTrain, ])
#separa amostra de teste
y_test = classe[!sampleTrain]
x_test = as.matrix(as.numeric(dataSet[!sampleTrain, ]))
retList =  treinaPerceptron(x_train, y_train, 0.1, 0.001, 100, 1)
w = retList$w
j = 1
perceptron(x_test[j,], w, 1)
x_test = as.matrix(dataSet[!sampleTrain, ])
perceptron(x_test[j,], w, 1)
y_estimado = c()
for(j in 1:dim(x_test)[1]){
y_estimado[j] = perceptron(x_test[j,], w, 1)
}
acurracy(y_test, y_estimado)
retList$erro
retList =  treinaPerceptron(x_train, y_train, 0.1, 0.001, 100, 1)
w = retList$w
y_estimado = c()
for(j in 1:dim(x_test)[1]){
y_estimado[j] = perceptron(x_test[j,], w, 1)
}
acurracy(y_test, y_estimado)
rm(list = ls())
source("treinaPerceptron.R")
source("perceptron.R")
library("caTools") # Funçã sample.split
library(mlbench) #Banco BreastCancer
set.seed(0)
acurracy <- function(respostas, teste){
return(sum(as.numeric(respostas == teste))/length(respostas))
}
data("BreastCancer")
dataSet = BreastCancer[complete.cases(BreastCancer), 2:10]
classes = BreastCancer[complete.cases(BreastCancer), 11]
#Cria classes
classe = ifelse(classes == "benign", 0, 1)
dataSet = apply(dataSet, 2, as.numeric)
acuracias = NULL
maxAcuracia = 0
maxAcuW = NULL
maxAcuErro = NULL
#Começa o loop
for(i in 1:100){
#Amostra 70 de cada classe para compor o treino
sampleTrain = sample.split(classe[classe == 0], SplitRatio = 7/10)
sampleTrain = append(sampleTrain, sample.split(classe[classe == 1], SplitRatio = 7/10))
#sepra amostras de treino
y_train = classe[sampleTrain]
x_train = as.matrix(dataSet[sampleTrain, ])
#separa amostra de teste
y_test = classe[!sampleTrain]
x_test = as.matrix(dataSet[!sampleTrain, ])
retList =  treinaPerceptron(x_train, y_train, 0.1, 0.001, 100, 1)
w = retList$w
y_estimado = c()
for(j in 1:dim(x_test)[1]){
y_estimado[j] = perceptron(x_test[j,], w, 1)
}
acuracias[i] = acurracy(y_test, y_estimado)
if(acuracias[i] > maxAcuracia){
maxAcuracia = acuracias[i]
maxAcuW = w
maxAcuErro = retList$erro
write.table(table(y_test, y_estimado), "IMG/4-confusao.csv", sep = ";", dec = ",")
}
}
print(maxAcuracia)
print(maxAcuW)
print(mean(acuracias))
print(var(acuracias))
png("IMG/4-erro.png")
plot(maxAcuErro, xlab = "Epoca", ylab = "Erro", main = "Erro de treinamento", type = 'b', pch = 19)
dev.off()
